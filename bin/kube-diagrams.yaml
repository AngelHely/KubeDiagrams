# Configuration of kube-diagrams
default_namespace: default
edges:
  REFERENCE:
    color: black
  SELECTOR:
    color: black
    style: dashed
  CONTROLLED_BY:
    xlabel: controller
    color: black
    style: dotted
  OWNER:
    color: black
    style: dotted
  DEPENDENCE:
    color: darkgrey
  UNDEFINED:
    color: red
clusters:
  - label: app
    title: Application
  - label: service
    title: Microservice
  - label: app.kubernetes.io/instance
    title: K8s Application
  - label: app.kubernetes.io/component
    title: K8s Component
  - label: tier
    title: Tier
nodes:
  ClusterRole/rbac.authorization.k8s.io/v1:
    scope: Cluster
    diagram_node_classname: diagrams.k8s.rbac.CRole
    edges: |
      for clusterRoleSelector in query_path(resource, "aggregationRule.clusterRoleSelectors", []):
        edges.add_all_resources_matching_labels("ClusterRole", "matchLabels", clusterRoleSelector)
  ClusterRoleBinding/rbac.authorization.k8s.io/v1:
    scope: Cluster
    diagram_node_classname: diagrams.k8s.rbac.CRB
    edges: |
      edges.add_role("roleRef")
      edges.add_subjects()
  ConfigMap/v1:
    scope: Namespaced
    diagram_node_classname: diagrams.k8s.podconfig.CM
    # no edges
  CronJob/batch/v1:
    scope: Namespaced
    diagram_node_classname: diagrams.k8s.compute.Cronjob
    edges: |
      edges.add_owned_resources()
  CustomResourceDefinition/apiextensions.k8s.io/v1:
    scope: Cluster
    diagram_node_classname: diagrams.k8s.others.CRD
    # no edges
  DaemonSet/apps/v1:
    scope: Namespaced
    diagram_node_classname: diagrams.k8s.compute.DS
    edges: |
      edges.add_all_resources_matching_labels("Pod", "spec.selector.matchLabels")
      edges.add_service_account("spec.template.spec.serviceAccountName")
      edges.add_all_volume_resources("spec.template.spec.volumes")
      edges.add_containers_env_valueFrom_secretKeyRef("spec.template.spec.containers")
  Deployment/apps/v1:
    scope: Namespaced
    diagram_node_classname: diagrams.k8s.compute.Deploy
    edges: |
      edges.add_all_resources_matching_labels("ReplicaSet", "spec.selector.matchLabels")
      edges.add_service_account("spec.template.spec.serviceAccountName")
      edges.add_wait_for_services("spec.template.spec.initContainers")
      edges.add_all_volume_resources("spec.template.spec.volumes")
      edges.add_containers_env_valueFrom_secretKeyRef("spec.template.spec.containers")
  Group/rbac.authorization.k8s.io/v1:
    scope: Cluster
    diagram_node_classname: diagrams.k8s.rbac.Group
    # no edges
  HorizontalPodAutoscaler/autoscaling/v2:
    scope: Namespaced
    diagram_node_classname: diagrams.k8s.clusterconfig.HPA
    edges: |
      edges.add_resource("spec.scaleTargetRef")
  Ingress/networking.k8s.io/v1:
    scope: Namespaced
    diagram_node_classname: diagrams.k8s.network.Ing
    edges: |
      for rule in query_path(resource, "spec.rules", []):
        for path in query_path(rule, "http.paths", []):
          edges.add_service("backend.service.name", path)
  IngressClass/networking.k8s.io/v1:
    scope: Cluster
    custom_icon: $KD/icons/ic.png
    edges: |
      # TODO: Following works well with ingress-nginx but was not
      # been tested with any other ingress implementations.
      edges.add_all_resources_matching_labels("Pod", "metadata.labels",
       edge_kind="CONTROLLED_BY")
  Job/batch/v1:
    scope: Namespaced
    diagram_node_classname: diagrams.k8s.compute.Job
    edges: |
      edges.add_all_resources_matching_labels("Pod", "spec.selector.matchLabels")
      edges.add_service_account("spec.template.spec.serviceAccountName")
      edges.add_all_volume_resources("spec.template.spec.volumes")
      edges.add_containers_env_valueFrom_secretKeyRef("spec.template.spec.containers")
  Namespace/v1:
    scope: Cluster
    diagram_node_classname: diagrams.k8s.group.NS
    # no edges
  Node/v1:
    scope: Cluster
    diagram_node_classname: diagrams.k8s.infra.Node
    # no edges
  PersistentVolume/v1:
    scope: Cluster
    diagram_node_classname: diagrams.k8s.storage.PV
    edges: |
      edges.add_storage_class("spec.storageClassName")
  PersistentVolumeClaim/v1:
    scope: Namespaced
    diagram_node_classname: diagrams.k8s.storage.PVC
    edges: |
      edges.add_storage_class("spec.storageClassName")
      edges.add_volume("spec.volumeName")
  Pod/v1:
    scope: Namespaced
    diagram_node_classname: diagrams.k8s.compute.Pod
    edges: |
      edges.add_service_account("spec.serviceAccountName")
      edges.add_wait_for_services("spec.initContainers")
      edges.add_all_volume_resources("spec.volumes")
      edges.add_containers_env_valueFrom_secretKeyRef("spec.containers")
  PodDisruptionBudget/policy/v1:
    scope: Namespaced
    custom_icon: $KD/icons/pdb.png
    edges: |
      if not edges.add_all_resources_matching_labels("Pod", "spec.selector.matchLabels"):
        if not edges.add_all_resources_matching_labels("Deployment", "spec.selector.matchLabels",
          resource_labels_path="spec.template.metadata.labels"):
            edges.add_all_resources_matching_labels("StatefulSet", "spec.selector.matchLabels",
              resource_labels_path="spec.template.metadata.labels")
  ReplicaSet/apps/v1:
    scope: Namespaced
    diagram_node_classname: diagrams.k8s.compute.RS
    edges: |
      edges.add_all_resources_matching_labels("Pod", "spec.selector.matchLabels")
      edges.add_service_account("spec.template.spec.serviceAccountName")
      edges.add_wait_for_services("spec.template.spec.initContainers")
      edges.add_all_volume_resources("spec.template.spec.volumes")
      edges.add_containers_env_valueFrom_secretKeyRef("spec.template.spec.containers")
  Role/rbac.authorization.k8s.io/v1:
    scope: Namespaced
    diagram_node_classname: diagrams.k8s.rbac.Role
    # no edges
  RoleBinding/rbac.authorization.k8s.io/v1:
    scope: Namespaced
    diagram_node_classname: diagrams.k8s.rbac.RB
    edges: |
      edges.add_role("roleRef")
      edges.add_subjects()
  Secret/v1:
    scope: Namespaced
    diagram_node_classname: diagrams.k8s.podconfig.Secret
    # no edges
  Service/v1:
    scope: Namespaced
    diagram_node_classname: diagrams.k8s.network.SVC
    edges: |
      if not edges.add_all_resources_matching_labels("Pod", "spec.selector"):
        if not edges.add_all_resources_matching_labels("Deployment", "spec.selector",
            resource_labels_path="spec.template.metadata.labels"):
          edges.add_all_resources_matching_labels("StatefulSet", "spec.selector",
              resource_labels_path="spec.template.metadata.labels")
  ServiceAccount/v1:
    scope: Namespaced
    diagram_node_classname: diagrams.k8s.rbac.SA
    # no edges
  StatefulSet/apps/v1:
    scoped: Namespaced
    diagram_node_classname: diagrams.k8s.compute.STS
    edges: |
      edges.add_all_resources_matching_labels("Pod", "spec.selector.matchLabels")
      edges.add_service_account("spec.template.spec.serviceAccountName")
      edges.add_service("spec.serviceName")
      edges.add_wait_for_services("spec.template.spec.initContainers")
      edges.add_all_volume_resources("spec.template.spec.volumes")
      edges.add_volume_claim_templates("spec.volumeClaimTemplates")
  StorageClass/storage.k8s.io/v1:
    scope: Cluster
    diagram_node_classname: diagrams.k8s.storage.SC
    # no edges
  User/rbac.authorization.k8s.io/v1:
    scope: Cluster
    diagram_node_classname: diagrams.k8s.rbac.User
    # no edges

#TODO: add other Kubernetes resource types.
# Ep diagrams.k8s.network.Ep, Endpoint (alias)
# Netpol diagrams.k8s.network.Netpol, NetworkPolicy (alias)
# PSP diagrams.k8s.others.PSP
# Vol diagrams.k8s.storage.Vol, Volume (alias)
