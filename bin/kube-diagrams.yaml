# Configuration of kube-diagrams
default_namespace: default
edges:
  REFERENCE:
    color: black
  REFERENCE-UP:
    color: black
    direction: up
  SELECTOR:
    color: black
    style: dashed
  SELECTOR-UP:
    color: black
    style: dashed
    direction: up
  SELECTOR-INGRESS:
    xlabel: ingress
    color: black
    style: dashed
    direction: up
  SELECTOR-EGRESS:
    xlabel: egress
    color: black
    style: dashed
    direction: up
  CONTROLLED_BY:
    xlabel: controller
    color: black
    style: dotted
  OWNER:
    color: black
    style: dotted
  DEPENDENCE:
    color: darkgrey
  UNDEFINED:
    color: red
clusters:
  - label: app.kubernetes.io/instance
    title: K8s Instance
    recommended: true
  - label: release
    title: Release
    recommended: false
  - label: helm.sh/chart
    title: Helm Chart
    recommended: true
  - label: chart
    title: Chart
    recommended: false
  - label: app.kubernetes.io/name
    title: K8s Application
    recommended: true
  - label: app
    title: Application
    recommended: false
  - label: app.kubernetes.io/component
    title: K8s Component
    recommended: true
  - label: service
    title: Microservice
    recommended: false
  - label: tier
    title: Tier
    recommended: false
nodes:
  ClusterRole/rbac.authorization.k8s.io/v1:
    scope: Cluster
    diagram_node_classname: diagrams.k8s.rbac.CRole
    edges: |
      for clusterRoleSelector in query_path(resource, "aggregationRule.clusterRoleSelectors", []):
        edges.add_all_resources_matching_labels("ClusterRole", "matchLabels", clusterRoleSelector)
  ClusterRoleBinding/rbac.authorization.k8s.io/v1:
    scope: Cluster
    diagram_node_classname: diagrams.k8s.rbac.CRB
    edges: |
      edges.add_role("roleRef")
      edges.add_subjects()
  ConfigMap/v1:
    scope: Namespaced
    diagram_node_classname: diagrams.k8s.podconfig.CM
    # no edges
  CronJob/batch/v1:
    scope: Namespaced
    diagram_node_classname: diagrams.k8s.compute.Cronjob
    edges: |
      edges.add_owned_resources()
      edges.add_all_resources_matching_labels("Pod", "spec.jobTemplate.spec.template.spec.selector.matchLabels")
      edges.add_service_account("spec.jobTemplate.spec.template.spec.serviceAccountName")
      edges.add_all_volume_resources("spec.jobTemplate.spec.template.spec.volumes")
      edges.add_containers_env_valueFrom("spec.jobTemplate.spec.template.spec.containers")
      edges.add_wait_for_services("spec.jobTemplate.spec.template.spec.initContainers")
      edges.add_networks("spec.jobTemplate.spec.template.metadata.annotations")
  CustomResourceDefinition/apiextensions.k8s.io/v1:
    scope: Cluster
    diagram_node_classname: diagrams.k8s.others.CRD
    # no edges
  DaemonSet/apps/v1:
    scope: Namespaced
    diagram_node_classname: diagrams.k8s.compute.DS
    edges: |
      edges.add_all_resources_matching_labels("Pod", "spec.selector.matchLabels")
      edges.add_service_account("spec.template.spec.serviceAccountName")
      edges.add_all_volume_resources("spec.template.spec.volumes")
      edges.add_containers_env_valueFrom("spec.template.spec.containers")
      edges.add_wait_for_services("spec.template.spec.initContainers")
      edges.add_networks("spec.template.metadata.annotations")
  Deployment/apps/v1:
    scope: Namespaced
    diagram_node_classname: diagrams.k8s.compute.Deploy
    edges: |
      edges.add_all_resources_matching_labels("ReplicaSet", "spec.selector.matchLabels")
      edges.add_service_account("spec.template.spec.serviceAccountName")
      edges.add_all_volume_resources("spec.template.spec.volumes")
      edges.add_containers_env_valueFrom("spec.template.spec.containers")
      edges.add_wait_for_services("spec.template.spec.initContainers")
      edges.add_networks("spec.template.metadata.annotations")
  Endpoints/v1:
    scope: Namespaced
    diagram_node_classname: diagrams.k8s.network.Endpoint
    edges: |
        for subset in resource.get("subsets", []):
          for address in subset.get("addresses", []):
            if "targetRef" in address:
              target = address["targetRef"]
              edges.append([
                "%s/%s/%s/%s" % (
                  target["name"],
                  target["namespace"],
                  target["kind"],
                  "v1",
                ),
                "REFERENCE"
              ])
  EndpointSlice/discovery.k8s.io/v1:
    scope: Namespaced
    custom_icon: $KD/icons/eps.png
    edges: |
        for endpoint in resource.get("endpoints", []):
          if "targetRef" in endpoint:
            target = endpoint["targetRef"]
            edges.append([
              "%s/%s/%s/%s" % (
                target["name"],
                target["namespace"],
                target["kind"],
                "v1",
              ),
              "REFERENCE"
            ])
  Group/rbac.authorization.k8s.io/v1:
    scope: Cluster
    diagram_node_classname: diagrams.k8s.rbac.Group
    # no edges
  HorizontalPodAutoscaler/autoscaling/v2:
    scope: Namespaced
    diagram_node_classname: diagrams.k8s.clusterconfig.HPA
    edges: |
      edges.add_resource("spec.scaleTargetRef")
  Ingress/networking.k8s.io/v1:
    scope: Namespaced
    diagram_node_classname: diagrams.k8s.network.Ing
    edges: |
      for rule in query_path(resource, "spec.rules", []):
        for path in query_path(rule, "http.paths", []):
          edges.add_service("backend.service.name", path)
      ic = "%s/IngressClass/networking.k8s.io/v1" % (
        query_path(resource, "spec.ingressClassName"),
      )
      if ic in resources:
        edges.append([ic, "REFERENCE"])
  IngressClass/networking.k8s.io/v1:
    scope: Cluster
    custom_icon: $KD/icons/ic.png
    edges: |
      # TODO: Following works well with ingress-nginx but was not
      # been tested with any other ingress implementations.
      edges.add_all_resources_matching_labels("Pod", "metadata.labels",
       edge_kind="CONTROLLED_BY")
  Job/batch/v1:
    scope: Namespaced
    diagram_node_classname: diagrams.k8s.compute.Job
    edges: |
      edges.add_all_resources_matching_labels("Pod", "spec.selector.matchLabels")
      edges.add_service_account("spec.template.spec.serviceAccountName")
      edges.add_all_volume_resources("spec.template.spec.volumes")
      edges.add_containers_env_valueFrom("spec.template.spec.containers")
      edges.add_wait_for_services("spec.template.spec.initContainers")
      edges.add_networks("spec.template.metadata.annotations")
  LimitRange/v1:
    scope: Namespaced
    diagram_node_classname: diagrams.k8s.clusterconfig.LimitRange
    # no edges
  MutatingWebhookConfiguration/admissionregistration.k8s.io/v1:
    scope: Cluster
    custom_icon: $KD/icons/mwc.png
    edges: |
      edges.add_webhooks()
  Namespace/v1:
    scope: Cluster
    diagram_node_classname: diagrams.k8s.group.NS
    # no edges
  NetworkAttachmentDefinition/k8s.cni.cncf.io/v1:
    scope: Namespaced
    diagram_node_classname: diagrams.azure.network.NetworkInterfaces
    # no edges
  NetworkPolicy/networking.k8s.io/v1:
    scope: Namespaced
    diagram_node_classname: diagrams.k8s.network.NetworkPolicy
    edges: |
      edges.add_all_workload_resources(
        "spec.podSelector.matchLabels",
        edge_kind="SELECTOR-UP"
      )
      edges.add_ingress_and_egress_rules()
  Node/v1:
    scope: Cluster
    diagram_node_classname: diagrams.k8s.infra.Node
    # no edges
  PersistentVolume/v1:
    scope: Cluster
    diagram_node_classname: diagrams.k8s.storage.PV
    edges: |
      edges.add_storage_class("spec.storageClassName")
  PersistentVolumeClaim/v1:
    scope: Namespaced
    diagram_node_classname: diagrams.k8s.storage.PVC
    edges: |
      edges.add_storage_class("spec.storageClassName")
      edges.add_volume("spec.volumeName")
  Pod/v1:
    scope: Namespaced
    diagram_node_classname: diagrams.k8s.compute.Pod
    edges: |
      edges.add_service_account("spec.serviceAccountName")
      edges.add_all_volume_resources("spec.volumes")
      edges.add_containers_env_valueFrom("spec.containers")
      edges.add_wait_for_services("spec.initContainers")
      nid = "%s/Node/v1" % (
        query_path(resource, "spec.nodeName"),
      )
      if nid in resources:
        edges.append([nid, "REFERENCE"])
      edges.add_networks("metadata.annotations")
  PodDisruptionBudget/policy/v1:
    scope: Namespaced
    custom_icon: $KD/icons/pdb.png
    edges: |
      edges.add_all_workload_resources("spec.selector.matchLabels")
  ReplicaSet/apps/v1:
    scope: Namespaced
    diagram_node_classname: diagrams.k8s.compute.RS
    edges: |
      edges.add_all_resources_matching_labels("Pod", "spec.selector.matchLabels")
      edges.add_service_account("spec.template.spec.serviceAccountName")
      edges.add_all_volume_resources("spec.template.spec.volumes")
      edges.add_containers_env_valueFrom("spec.template.spec.containers")
      edges.add_wait_for_services("spec.template.spec.initContainers")
      edges.add_networks("spec.template.metadata.annotations")
  ResourceQuota/v1:
    scope: Namespaced
    diagram_node_classname: diagrams.k8s.clusterconfig.Quota
    # no edges
  Role/rbac.authorization.k8s.io/v1:
    scope: Namespaced
    diagram_node_classname: diagrams.k8s.rbac.Role
    # no edges
  RoleBinding/rbac.authorization.k8s.io/v1:
    scope: Namespaced
    diagram_node_classname: diagrams.k8s.rbac.RB
    edges: |
      edges.add_role("roleRef")
      edges.add_subjects()
  Secret/v1:
    scope: Namespaced
    diagram_node_classname: diagrams.k8s.podconfig.Secret
    # no edges
  Service/v1:
    scope: Namespaced
    diagram_node_classname: diagrams.k8s.network.SVC
    edges: |
      edges.add_edges_for_service()
  ServiceAccount/v1:
    scope: Namespaced
    diagram_node_classname: diagrams.k8s.rbac.SA
    # no edges
  StatefulSet/apps/v1:
    scoped: Namespaced
    diagram_node_classname: diagrams.k8s.compute.STS
    edges: |
      edges.add_all_resources_matching_labels("Pod", "spec.selector.matchLabels")
      edges.add_service_account("spec.template.spec.serviceAccountName")
      edges.add_all_volume_resources("spec.template.spec.volumes")
      edges.add_containers_env_valueFrom("spec.template.spec.containers")
      edges.add_wait_for_services("spec.template.spec.initContainers")
      edges.add_networks("spec.template.metadata.annotations")
      edges.add_volume_claim_templates("spec.volumeClaimTemplates")
      edges.add_service("spec.serviceName")
  StorageClass/storage.k8s.io/v1:
    scope: Cluster
    diagram_node_classname: diagrams.k8s.storage.SC
    # no edges
  User/rbac.authorization.k8s.io/v1:
    scope: Cluster
    diagram_node_classname: diagrams.k8s.rbac.User
    # no edges
  ValidatingWebhookConfiguration/admissionregistration.k8s.io/v1:
    scope: Cluster
    custom_icon: $KD/icons/vwc.png
    edges: |
      edges.add_webhooks()

#TODO: add other Kubernetes resource types.
# PSP diagrams.k8s.others.PSP
# Vol diagrams.k8s.storage.Vol, Volume (alias)
