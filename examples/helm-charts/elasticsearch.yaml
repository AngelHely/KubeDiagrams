---
# Source: elasticsearch/templates/poddisruptionbudget.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: "elasticsearch-master-pdb"
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app: "elasticsearch-master"
---
# Source: elasticsearch/templates/secret-cert.yaml
apiVersion: v1
kind: Secret
type: kubernetes.io/tls
metadata:
  name: elasticsearch-master-certs
  labels:
    app: elasticsearch-master
    chart: "elasticsearch"
    heritage: Helm
    release: elasticsearch
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURoekNDQW0rZ0F3SUJBZ0lRYmpsZUlYdHN4SjFuWkNpOWhvWFN5ekFOQmdrcWhraUc5dzBCQVFzRkFEQWIKTVJrd0Z3WURWUVFERXhCbGJHRnpkR2xqYzJWaGNtTm9MV05oTUI0WERUSTFNREl4T1RBNE1EVXdObG9YRFRJMgpNREl4T1RBNE1EVXdObG93SHpFZE1Cc0dBMVVFQXhNVVpXeGhjM1JwWTNObFlYSmphQzF0WVhOMFpYSXdnZ0VpCk1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLQW9JQkFRRFYwZTh1MGNJeTh2UXhNZjJvdTk5N3AxUS8KdEx3Q1ZvRkR1NUJXdzJtbGNUTGhlNEQvZS9aZzNnWm43TTRubzgwbnBnTCtYT0pYZy9CNEQ1NDhSM1FadzgxMApvZWt1Sm9hbFc2bngxeVFHWVVFTmJ3Z0I5RjJwZGp4ZHdjL2M4OFZpRStMM3BaNE1wS3R0TldVcjN5UldSVlQwCktsbDFtb25xVjV5ZlZadlRHa2RkcERCelNkQ29TL2FyNUV1ZFJpK0FYM0p6bTNkZ2EzeG5wZE5oS0tCc1JadkgKd3orcW1BQU9zSHNLaGRPcHFIWjRReC9FWjlCNVpNYzNCMHlMQ0x2U1ZhcW5tWmRmbnpZSVNnQXl2Ry9oSVd0aAorVzBOZXpNMityYTY3TTR3NDRvRm1qRUEyUHNoOWE3Q3JmTUFLWUJzRWRXbFlHdVlKS2lGWVVDcFhXMkJBZ01CCkFBR2pnY0l3Z2I4d0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWRKUVFXTUJRR0NDc0dBUVVGQndNQkJnZ3IKQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1COEdBMVVkSXdRWU1CYUFGTVJwWlMvNTlJY3pxNFFYVnRKYwptc1ZHSnM5ek1GOEdBMVVkRVFSWU1GYUNGR1ZzWVhOMGFXTnpaV0Z5WTJndGJXRnpkR1Z5Z2h4bGJHRnpkR2xqCmMyVmhjbU5vTFcxaGMzUmxjaTVrWldaaGRXeDBnaUJsYkdGemRHbGpjMlZoY21Ob0xXMWhjM1JsY2k1a1pXWmgKZFd4MExuTjJZekFOQmdrcWhraUc5dzBCQVFzRkFBT0NBUUVBRThEYStNOVR5S2ZJVytQT0o0T0o2R1YrQ0F0Ywo3VjhZeU9LQUtkWFVmN0w1R1Nsa3BKOXBiQ1pSdGoxUVdhSGVGbXB2MGNhU1pYSU9QRXJ2cmtOMUZ3b09IMmNuCmUzVnBCWENXZmlQWi9rOEd5UyszYnN2WU4zK2VXdkJKZGJDVm84a213R0ZXU1lPR2w1bFRoWWdCYnFNb2ZCOWcKeWFURFJ2YUdpN2dGNXVITGV1VWZrOGc4bG0zTFlXSTBYeUdHQThGTW1xT3J1cnpFdFpEa09acmlRTVFPTTFsKwpoVWNxR2pQNVI4VEVESVdqUDgwbzRXc1hJcFZzMnpFMWpES1RFMlR3emZQYks3aFo0T2hSRHZtUWNoY042aWdqCm1yQ3dkVlN0NHl0UTVWTVNmNkV2U0JjaWFvV0xqN3VWaVZKNzVQb21uRFoyZUpLc1M5UDBQbUlzS0E9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBMWRIdkx0SENNdkwwTVRIOXFMdmZlNmRVUDdTOEFsYUJRN3VRVnNOcHBYRXk0WHVBCi8zdjJZTjRHWit6T0o2UE5KNllDL2x6aVY0UHdlQStlUEVkMEdjUE5kS0hwTGlhR3BWdXA4ZGNrQm1GQkRXOEkKQWZSZHFYWThYY0hQM1BQRlloUGk5NldlREtTcmJUVmxLOThrVmtWVTlDcFpkWnFKNmxlY24xV2IweHBIWGFRdwpjMG5RcUV2MnErUkxuVVl2Z0Y5eWM1dDNZR3Q4WjZYVFlTaWdiRVdieDhNL3FwZ0FEckI3Q29YVHFhaDJlRU1mCnhHZlFlV1RITndkTWl3aTcwbFdxcDVtWFg1ODJDRW9BTXJ4djRTRnJZZmx0RFhzek52cTJ1dXpPTU9PS0Jab3gKQU5qN0lmV3V3cTN6QUNtQWJCSFZwV0JybUNTb2hXRkFxVjF0Z1FJREFRQUJBb0lCQUJaRGpjd3FPelppNWRwWgpnamdYbCtXZ1ByMkRiREF5SWJPVHpDdThuVHVFMWU5MGxMSUZqbG4zeEdMOTNWbHpUT0ZiLytQTWVDVDBzQTFRClV3R2p6d3Ivd0Z6c253TVhMOTMzOVhJaEhMY3RXVUMwMXZpZElVT0w5QzB2Q1IzUXBEVGFMVC9zRnREcU5JOWkKaCs1UmhjOFYyUXF6Zmkwb3NrT2NhOHFMZDNZN2pZV0JmV0IwVFd2bk41c3ZIUHd1dENWMkhKKzc4VG5WVFN2TQpFWjBRRkF0YUMvcDRwNngvbXdzZ09WeVFXUmc5WFAyS1B2RWNBZVRyRTF2OFNVb1ZRbERrNk1hSFFxcURPc3FzClFnNjJMWERTVEdJZmxuSmVtRzJvVTMwL2UwRlh6OTV4ZGlORzNRRGVHaFB6M2xVZXJtdnYxMW9XWkszZ1NEZXEKaWlzYTdLRUNnWUVBOENCSGwwckthUkJ6cnRrZXVYTjFhR2s0bkJzWk9yZlFWdzAybW9yd2RSNU1EMm9OK0RaeAppR1RLUElaNjRQV0E0a2RtUVEycDR4eGFFZDVKWXA1LzdQc0JGQ09adTNkb3M5VHExTkp5Ui85QlVzVVZHMTByCkFZMEYreThBVS9TQnJla2ZIMVRvZTlCdEVZK0xGUSs3eWNKVnowUEpEcHQvMFQwSE9qUU9BWmNDZ1lFQTQvUjQKWnFwaXJFL3hXOWRTVWRDSzFvcFA0QWZCaHBJbkNiT0YwL1Izd0tKaEhTYzJqSlprQWpjaHpKZDhldTlWNXAwNwoxc2p3Ty9XZGRJNTU0NjdEeEJzdm5HT1YzM0VsTS9MaDE5VUd4aFRudERVejFDcVNham43NUhRYVlHVVZTTkd6Cm5veUtKWmZ4MkQ3cTlaeUIvUmVrZmc0K1JsRmtGazhtb3VoZFBLY0NnWUFzOEUyVm9kaVpxd3VMV0hUb2poUVYKODBNMTY5aGY1ZENteWdGREVPZUpjNThXYjJtbjMwQ0dIeDYrRHdqbUd1d0E3UTNVOU9LcmJ6M29CQ3JGdXhZRAoyc0hMN0JHMFJOZWllQ0Z1ck9mWVU0djlHb2NsdE56OGtGRGpQbHVZV3JUK1FCZWovSGI1M1ByY2czbXErbVBSCmtYNFBxUWJ5cGVWWTJrd0U5NEw3aHdLQmdFZXUvQ0hFMk95NDR2eHZsTXAzbXdGbVUwSHZEbk9FQ0ZTcnFKMEQKbHBqME56ZlV1Zm14M1ZjNUFSNzJVRVhVZDUzaXVndUwrc2ZRTUNpVUdVNTVDY1RraTY5UlBiTWJRSWk2aXp5MQpGOEU0bDdoNnRvYTBzSUJKSmFZc3dKS3BsdXprVE9qQjV6dDFNYTgvOGVFMHkwZk1wSVNqYy8vbTNtT0psbXZLClNHK25Bb0dCQU9lLzRlSlNMTWVaZXZNemxSamlCMjJucTJNT1lQMFI1OUZTYjRpeXNIdDhBZ0QwSG9rMG91Z2oKM3o2OUg2amNiY3E3VXVHNjlkNWxrZUpucGQvbm1Kck9waFlVWnpXZTc4UW5mQzJqa0JkQVVobi9IbWZ2Nk9zeApOMDBPVTBGWGgvWlphNTZqSzhjbUcvb1oxdWM0WjNHeEJOYUNlbnd6ck5pY3JOMFcvQ0gxCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURJVENDQWdtZ0F3SUJBZ0lRV3FIMUl0WUFUL2lWWjgycHNRSEdUREFOQmdrcWhraUc5dzBCQVFzRkFEQWIKTVJrd0Z3WURWUVFERXhCbGJHRnpkR2xqYzJWaGNtTm9MV05oTUI0WERUSTFNREl4T1RBNE1EVXdObG9YRFRJMgpNREl4T1RBNE1EVXdObG93R3pFWk1CY0dBMVVFQXhNUVpXeGhjM1JwWTNObFlYSmphQzFqWVRDQ0FTSXdEUVlKCktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0NnZ0VCQU5lUE9wdUlwQXhYazNCTEQwNkZ0MmtmRFFPV1BKcVgKUndVZjBqM0REUHVCR1dWT09vRkxlSW4rT1RhUnl0bUhNTmFIZEVRZFlFR0Jia1VLeEM4bWxQOUVudkJGVnFYSwpNbFFydVI2Vy9NYUtMamY2dERPS0YvZWlpQ0s4aUhVY3E2cktsNkRzbUJpODhzMVl6MnhiZnNHdHpnS2JwWWRtCndidURIQjBzQktRTG84NUlyNEFCS0Z4RlVmRGN1cCt1aTdBc1YyS3hkVStONVJRU2VoZUN0VGFDYkFmU3EwYnUKRkkwZG9USVppMC9uR1V2QzBHVU9mMVhaL2o3RWpkcGFrampwak1pZGNVQXN6Qm13SVNKaFZOVm80TXBOWXBRSgo3aHh4K3k5VHd3Yno3dmhqa2hlWk9TVzk3S1Q0MVhOUmdoOWc5bWRUbmFweUlILzZLL2prSWpzQ0F3RUFBYU5oCk1GOHdEZ1lEVlIwUEFRSC9CQVFEQWdLa01CMEdBMVVkSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0QKQWpBUEJnTlZIUk1CQWY4RUJUQURBUUgvTUIwR0ExVWREZ1FXQkJURWFXVXYrZlNITTZ1RUYxYlNYSnJGUmliUApjekFOQmdrcWhraUc5dzBCQVFzRkFBT0NBUUVBT3I5MjZrMzJNczBHVWlGNVFHY0doazhaMys3Y253ZHV1cHV5CmtSWmdNTHhlbDlDa0hPYWx0UmVvc2tkbkwyS0Rid1JGQkhDb1V1cVR1emgyOENGa2F6MEdPaTU1dGovajBaUTcKUERITVlUNytFUDJBRzBzYm1NZnhnTWRYSWwvaXFNbDVtRnIzL01qMzBkV1BHTUd4ZUp6MGtxbXhUY2pyQ1RzQgpEWi9ZK2U4MTVLS2pRQXAxam9oLzJwaFhRK0lkekIwUDNucmtLTERyalFuaUhlcGlMdXBYbnVvczB3MGdQMjB0CjUrcUJmdis4cW9ySEc4blVpV05pbVhLcDZhek1vV2YwYzI5VUpMbjNEb1hXWXJQOGZGeXYydkFJczFtakdPL08KOHJZMDNuamh1WHNvL1hqWkZjSXFCNnlLczRXcmpnNzVlcUZkNDVvdm5zWFc3dW4xZ1E9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
---
# Source: elasticsearch/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: elasticsearch-master-credentials
  labels:
    heritage: "Helm"
    release: "elasticsearch"
    chart: "elasticsearch"
    app: "elasticsearch-master"
type: Opaque
data:
  username: ZWxhc3RpYw==
  password: "RzVTem5yUUk5b3phMmRuYQ=="
---
# Source: elasticsearch/templates/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: elasticsearch-master
  labels:
    heritage: "Helm"
    release: "elasticsearch"
    chart: "elasticsearch"
    app: "elasticsearch-master"
  annotations:
    {}
spec:
  type: ClusterIP
  selector:
    release: "elasticsearch"
    chart: "elasticsearch"
    app: "elasticsearch-master"
  publishNotReadyAddresses: false
  ports:
  - name: http
    protocol: TCP
    port: 9200
  - name: transport
    protocol: TCP
    port: 9300
---
# Source: elasticsearch/templates/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: elasticsearch-master-headless
  labels:
    heritage: "Helm"
    release: "elasticsearch"
    chart: "elasticsearch"
    app: "elasticsearch-master"
  annotations:
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  clusterIP: None # This is needed for statefulset hostnames like elasticsearch-0 to resolve
  # Create endpoints also if the related pod isn't ready
  publishNotReadyAddresses: true
  selector:
    app: "elasticsearch-master"
  ports:
  - name: http
    port: 9200
  - name: transport
    port: 9300
---
# Source: elasticsearch/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: elasticsearch-master
  labels:
    heritage: "Helm"
    release: "elasticsearch"
    chart: "elasticsearch"
    app: "elasticsearch-master"
  annotations:
    esMajorVersion: "8"
spec:
  serviceName: elasticsearch-master-headless
  selector:
    matchLabels:
      app: "elasticsearch-master"
  replicas: 3
  podManagementPolicy: Parallel
  updateStrategy:
    type: RollingUpdate
  volumeClaimTemplates:
  - metadata:
      name: elasticsearch-master
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 30Gi
  template:
    metadata:
      name: "elasticsearch-master"
      labels:
        release: "elasticsearch"
        chart: "elasticsearch"
        app: "elasticsearch-master"
      annotations:
        
    spec:
      securityContext:
        fsGroup: 1000
        runAsUser: 1000
      automountServiceAccountToken: true
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - "elasticsearch-master"
            topologyKey: kubernetes.io/hostname
      terminationGracePeriodSeconds: 120
      volumes:
        - name: elasticsearch-certs
          secret:
           secretName: elasticsearch-master-certs
      enableServiceLinks: true
      initContainers:
      - name: configure-sysctl
        securityContext:
          runAsUser: 0
          privileged: true
        image: "docker.elastic.co/elasticsearch/elasticsearch:8.5.1"
        imagePullPolicy: "IfNotPresent"
        command: ["sysctl", "-w", "vm.max_map_count=262144"]
        resources:
          {}

      containers:
      - name: "elasticsearch"
        securityContext:
          capabilities:
            drop:
            - ALL
          runAsNonRoot: true
          runAsUser: 1000
        image: "docker.elastic.co/elasticsearch/elasticsearch:8.5.1"
        imagePullPolicy: "IfNotPresent"
        readinessProbe:
          exec:
            command:
              - bash
              - -c
              - |
                set -e

                # Exit if ELASTIC_PASSWORD in unset
                if [ -z "${ELASTIC_PASSWORD}" ]; then
                  echo "ELASTIC_PASSWORD variable is missing, exiting"
                  exit 1
                fi

                # If the node is starting up wait for the cluster to be ready (request params: "wait_for_status=green&timeout=1s" )
                # Once it has started only check that the node itself is responding
                START_FILE=/tmp/.es_start_file

                # Disable nss cache to avoid filling dentry cache when calling curl
                # This is required with Elasticsearch Docker using nss < 3.52
                export NSS_SDB_USE_CACHE=no

                http () {
                  local path="${1}"
                  local args="${2}"
                  set -- -XGET -s

                  if [ "$args" != "" ]; then
                    set -- "$@" $args
                  fi

                  set -- "$@" -u "elastic:${ELASTIC_PASSWORD}"

                  curl --output /dev/null -k "$@" "https://127.0.0.1:9200${path}"
                }

                if [ -f "${START_FILE}" ]; then
                  echo 'Elasticsearch is already running, lets check the node is healthy'
                  HTTP_CODE=$(http "/" "-w %{http_code}")
                  RC=$?
                  if [[ ${RC} -ne 0 ]]; then
                    echo "curl --output /dev/null -k -XGET -s -w '%{http_code}' \${BASIC_AUTH} https://127.0.0.1:9200/ failed with RC ${RC}"
                    exit ${RC}
                  fi
                  # ready if HTTP code 200, 503 is tolerable if ES version is 6.x
                  if [[ ${HTTP_CODE} == "200" ]]; then
                    exit 0
                  elif [[ ${HTTP_CODE} == "503" && "8" == "6" ]]; then
                    exit 0
                  else
                    echo "curl --output /dev/null -k -XGET -s -w '%{http_code}' \${BASIC_AUTH} https://127.0.0.1:9200/ failed with HTTP code ${HTTP_CODE}"
                    exit 1
                  fi

                else
                  echo 'Waiting for elasticsearch cluster to become ready (request params: "wait_for_status=green&timeout=1s" )'
                  if http "/_cluster/health?wait_for_status=green&timeout=1s" "--fail" ; then
                    touch ${START_FILE}
                    exit 0
                  else
                    echo 'Cluster is not yet ready (request params: "wait_for_status=green&timeout=1s" )'
                    exit 1
                  fi
                fi
          failureThreshold: 3
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 3
          timeoutSeconds: 5
        ports:
        - name: http
          containerPort: 9200
        - name: transport
          containerPort: 9300
        resources:
          limits:
            cpu: 1000m
            memory: 2Gi
          requests:
            cpu: 1000m
            memory: 2Gi
        env:
          - name: node.name
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: cluster.initial_master_nodes
            value: "elasticsearch-master-0,elasticsearch-master-1,elasticsearch-master-2,"
          - name: node.roles
            value: "master,data,data_content,data_hot,data_warm,data_cold,ingest,ml,remote_cluster_client,transform,"
          - name: discovery.seed_hosts
            value: "elasticsearch-master-headless"
          - name: cluster.name
            value: "elasticsearch"
          - name: network.host
            value: "0.0.0.0"
          - name: ELASTIC_PASSWORD
            valueFrom:
              secretKeyRef:
                name: elasticsearch-master-credentials
                key: password
          - name: xpack.security.enabled
            value: "true"
          - name: xpack.security.transport.ssl.enabled
            value: "true"
          - name: xpack.security.http.ssl.enabled
            value: "true"
          - name: xpack.security.transport.ssl.verification_mode
            value: "certificate"
          - name: xpack.security.transport.ssl.key
            value: "/usr/share/elasticsearch/config/certs/tls.key"
          - name: xpack.security.transport.ssl.certificate
            value: "/usr/share/elasticsearch/config/certs/tls.crt"
          - name: xpack.security.transport.ssl.certificate_authorities
            value: "/usr/share/elasticsearch/config/certs/ca.crt"
          - name: xpack.security.http.ssl.key
            value: "/usr/share/elasticsearch/config/certs/tls.key"
          - name: xpack.security.http.ssl.certificate
            value: "/usr/share/elasticsearch/config/certs/tls.crt"
          - name: xpack.security.http.ssl.certificate_authorities
            value: "/usr/share/elasticsearch/config/certs/ca.crt"
        volumeMounts:
          - name: "elasticsearch-master"
            mountPath: /usr/share/elasticsearch/data
          - name: elasticsearch-certs
            mountPath: /usr/share/elasticsearch/config/certs
            readOnly: true
---
# Source: elasticsearch/templates/test/test-elasticsearch-health.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "elasticsearch-svkoz-test"
  annotations:
    "helm.sh/hook": test
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  securityContext:
    fsGroup: 1000
    runAsUser: 1000
  containers:
  - name: "elasticsearch-dmsiq-test"
    env:
      - name: ELASTIC_PASSWORD
        valueFrom:
          secretKeyRef:
            name: elasticsearch-master-credentials
            key: password
    image: "docker.elastic.co/elasticsearch/elasticsearch:8.5.1"
    imagePullPolicy: "IfNotPresent"
    command:
      - "sh"
      - "-c"
      - |
        #!/usr/bin/env bash -e
        curl -XGET --fail --cacert /usr/share/elasticsearch/config/certs/tls.crt -u "elastic:${ELASTIC_PASSWORD}" https://'elasticsearch-master:9200/_cluster/health?wait_for_status=green&timeout=1s'
    volumeMounts:
      - name: elasticsearch-certs
        mountPath: /usr/share/elasticsearch/config/certs
        readOnly: true
  restartPolicy: Never
  volumes:
    - name: elasticsearch-certs
      secret:
        secretName: elasticsearch-master-certs
